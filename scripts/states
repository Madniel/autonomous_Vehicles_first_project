#!/usr/bin/env python
import rospy
from av_msgs.msg import Mode
from av_msgs.msg import States
from prius_msgs.msg import Control
from nav_msgs.msg import Odometry
import numpy as np


class Velocity:
    def __init__(self):
        self.sub = rospy.Subscriber("/base_pose_ground_truth", Odometry, self.callback)
        self.sub2 = rospy.Subscriber("/prius", Control, self.callback2)

        self.pub = rospy.Publisher('/prius/states', States, queue_size=1)

        self.last_published_time = rospy.get_rostime()
        self.last_published = None
        self.timer = rospy.Timer(rospy.Duration(1. / 20.), self.timer_callback)

        self.steer = 0

    def timer_callback(self, event):
        if self.last_published and self.last_published_time < rospy.get_rostime() + rospy.Duration(1.0 / 20.):
            self.pub(self.last_published)

    def callback(self, message):
        states_msg = States()
        x = message.twist.twist.linear.x
        y = message.twist.twist.linear.y
        z = message.twist.twist.linear.z

        velocity = np.sqrt(np.power((np.abs(x)), 2) + np.power((np.abs(y)), 2) + np.power((np.abs(z)), 2))
        velocity = velocity * 3.6
        states_msg.velocity = np.round(velocity, 2)
        states_msg.steer = self.steer
        self.pub.publish(states_msg)

    def callback2(self, message):
        self.steer = np.round(message.steer, 2)


if __name__ == "__main__":
    rospy.init_node("states_node")
    v = Velocity()
    # s = Steer()
    rospy.spin()

